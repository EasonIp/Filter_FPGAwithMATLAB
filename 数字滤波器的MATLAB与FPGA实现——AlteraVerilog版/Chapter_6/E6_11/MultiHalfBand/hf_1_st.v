// Generated by FIR Compiler
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************
// Copyright (C) 1991-2004 Altera Corporation
// Any megafunction design, and related net list (encrypted or decrypted),
// support information, device programming or simulation file, and any other
// associated documentation or information provided by Altera or a partner
// under Altera's Megafunction Partnership Program may be used only to
// program PLD devices (but not masked PLD devices) from Altera.  Any other
// use of such megafunction design, net list, support information, device
// programming or simulation file, or any other related documentation or
// information is prohibited for any other purpose, including, but not
// limited to modification, reverse engineering, de-compiling, or use with
// any other silicon devices, unless such use is explicitly licensed under
// a separate agreement with Altera or a megafunction partner.  Title to
// the intellectual property, including patents, copyrights, trademarks,
// trade secrets, or maskworks, embodied in any such megafunction design,
// net list, support information, device programming or simulation file, or
// any other related documentation or information provided by Altera or a
// megafunction partner, remains with Altera, the megafunction partner, or
// their respective licensors.  No other licenses, including any licenses
// needed under any third party's intellectual property, are provided herein.
// 01
// altera message_off 10036
(* altera_attribute = "-name MESSAGE_DISABLE 15400; -name MESSAGE_DISABLE 14130; -name MESSAGE_DISABLE 10036; -name MESSAGE_DISABLE 12020; -name MESSAGE_DISABLE 12030; -name MESSAGE_DISABLE 12010; -name MESSAGE_DISABLE 12110; -name MESSAGE_DISABLE 14320; -name MESSAGE_DISABLE 13410" *)
module hf_1_st (clk, 
              rst, 
              data_in, 
              clk_en, 
              done, 
              rdy_to_ld, 
              fir_result ); 

parameter DATA_WIDTH  = 8;
parameter COEF_WIDTH  = 12;
parameter COEF_WIDTH_IN  = 12;
parameter ACCUM_WIDTH = 20;

input clk, rst;
input [DATA_WIDTH -1 :0] data_in;
input clk_en;
output done;
wire done;
wire done_int;
wire data_ld;
output rdy_to_ld;
wire rdy_to_ld;
wire rdy_int;
output [ACCUM_WIDTH-1:0] fir_result;

wire acc_rst_out;
wire rev_copy;
wire coef_in_clk;
assign coef_in_clk = clk;
wire [7:0] tdl_dat_0_n;
wire [7:0] tdl_dat_1_n;
wire [7:0] tdl_dat_2_n;
wire [7:0] tdl_dat_3_n;
wire [7:0] tdl_dat_2_n_pre;
wire [7:0] tdl_dat_2_n_dd;
wire [7:0] data_in_mux;
mux_2to1_cen tdl_mux(.clk(clk), .rst(rst), .gclk_en(clk_en), .bin(tdl_dat_1_n), .ain(data_in),
 .data_out(data_in_mux), .sel(rdy_int));
defparam tdl_mux.IN_WIDTH = 8;
msft_data tdl_ff_0_n(.rst(rst), .clk(clk), .clk_en(clk_en), .we(data_ld), .data_in(data_in_mux),.data_out(tdl_dat_0_n));
defparam tdl_ff_0_n.WIDTH = 8;
defparam tdl_ff_0_n.LENGTH = 2;
defparam tdl_ff_0_n.DELAY = 0;
msft_data tdl_ff_1_n(.rst(rst), .clk(clk), .clk_en(clk_en), .we(data_ld), .data_in(tdl_dat_0_n),.data_out(tdl_dat_1_n));
defparam tdl_ff_1_n.WIDTH = 8;
defparam tdl_ff_1_n.LENGTH = 2;
defparam tdl_ff_1_n.DELAY = 0;
msft_data_reseq tdl_ff_2_n(.rst(rst), .clk(clk), .clk_en(clk_en), .we(data_ld),  .copy(rev_copy),.data_in(tdl_dat_1_n),.data_out_dd(tdl_dat_2_n_dd), .data_out(tdl_dat_2_n));
defparam tdl_ff_2_n.WIDTH = 8;
defparam tdl_ff_2_n.LENGTH = 2;
defparam tdl_ff_2_n.DELAY = 0;
defparam tdl_ff_2_n.IS_ODD = 1;
msft_data tdl_ff_3_n(.rst(rst), .clk(clk), .clk_en(clk_en), .we(data_ld), .data_in(tdl_dat_2_n_dd),.data_out(tdl_dat_3_n));
defparam tdl_ff_3_n.WIDTH = 8;
defparam tdl_ff_3_n.LENGTH = 2;
defparam tdl_ff_3_n.DELAY = 0;

// symmetrical adders ...
wire [8:0] sym_res_0_n;
sadd_cen U_0_sym_add (.clk(clk), .gclk_en(clk_en), .ain(tdl_dat_0_n), .bin(tdl_dat_3_n), .res(sym_res_0_n) );
defparam U_0_sym_add.IN_WIDTH = 8;
defparam U_0_sym_add.PIPE_DEPTH = 1;
wire [8:0] sym_res_1_n;
sadd_cen U_1_sym_add (.clk(clk), .gclk_en(clk_en), .ain(tdl_dat_1_n), .bin(tdl_dat_2_n), .res(sym_res_1_n) );
defparam U_1_sym_add.IN_WIDTH = 8;
defparam U_1_sym_add.PIPE_DEPTH = 1;


wire coef_en ;
assign coef_en = clk_en;
wire [11:0] coef_st_comb_0_n;
wire [COEF_WIDTH-1:0]coef_st_0_n;
assign coef_st_0_n = coef_st_comb_0_n[11:0];
msft_lt_32 Ucoef_0_n (.rst(rst), .clk(clk), .clk_en(coef_en), .we(1'b0), .data_in(12'b0), .data_out(coef_st_comb_0_n));
defparam Ucoef_0_n.WIDTH = COEF_WIDTH;
defparam Ucoef_0_n.LENGTH = 2;
defparam Ucoef_0_n.DELAY = 0;
defparam Ucoef_0_n.C0 = 0;
defparam Ucoef_0_n.C1 = 4032;
wire [11:0] coef_st_comb_1_n;
wire [COEF_WIDTH-1:0]coef_st_1_n;
assign coef_st_1_n = coef_st_comb_1_n[11:0];
msft_lt_32 Ucoef_1_n (.rst(rst), .clk(clk), .clk_en(coef_en), .we(1'b0), .data_in(12'b0), .data_out(coef_st_comb_1_n));
defparam Ucoef_1_n.WIDTH = COEF_WIDTH;
defparam Ucoef_1_n.LENGTH = 2;
defparam Ucoef_1_n.DELAY = 0;
defparam Ucoef_1_n.C0 = 1024;
defparam Ucoef_1_n.C1 = 576;


wire [20:0] mlu_resx_0_n;
mlu_inf_2reg Umlu_0_n (.clk(clk), .data_in(sym_res_0_n), .coef_in(coef_st_0_n), .clk_en(clk_en), .mlu_out(mlu_resx_0_n) );
defparam Umlu_0_n.DATA_WIDTH = 9;
defparam Umlu_0_n.COEF_WIDTH = COEF_WIDTH;
defparam Umlu_0_n.PIPE = 2;
defparam Umlu_0_n.DSP_USE = "YES";
wire [20:0] mlu_res_0_n;
mac_tl Umtl_0_n             (.clk(clk), 
             .data_in(mlu_resx_0_n),
             .data_out(mlu_res_0_n));
defparam Umtl_0_n.DATA_WIDTH = 21;

wire [20:0] mlu_resx_1_n;
mlu_inf_2reg Umlu_1_n (.clk(clk), .data_in(sym_res_1_n), .coef_in(coef_st_1_n), .clk_en(clk_en), .mlu_out(mlu_resx_1_n) );
defparam Umlu_1_n.DATA_WIDTH = 9;
defparam Umlu_1_n.COEF_WIDTH = COEF_WIDTH;
defparam Umlu_1_n.PIPE = 2;
defparam Umlu_1_n.DSP_USE = "YES";
wire [20:0] mlu_res_1_n;
mac_tl Umtl_1_n             (.clk(clk), 
             .data_in(mlu_resx_1_n),
             .data_out(mlu_res_1_n));
defparam Umtl_1_n.DATA_WIDTH = 21;

wire [21:0] tree_l_0_n_0_n;
sadd_reg_top_cen Uaddl_0_n_0_n (.clk(clk),  .gclk_en(clk_en), .ain(mlu_res_0_n), .bin(mlu_res_1_n), .res(tree_l_0_n_0_n) );
defparam Uaddl_0_n_0_n.IN_WIDTH = 21;
defparam Uaddl_0_n_0_n.PIPE_DEPTH = 1;

wire [21:0] fir_mc_res;
assign fir_mc_res=tree_l_0_n_0_n;
wire [19:0] fir_acc_in;
wire [19:0] fir_temp_res;
wire [19:0] fir_acc_in_reg;
assign fir_acc_in = fir_mc_res[ACCUM_WIDTH-1:0];
lc_store_cen Uaccum_reg (.clk(clk), .ce(1'b1), .gclk_en(clk_en),.rst(rst), .data_in(fir_acc_in), .q(fir_acc_in_reg) );
defparam Uaccum_reg.WIDTH = ACCUM_WIDTH;
maccum_cen Usa (.clk(clk), .gclk_en(clk_en),.rst(acc_rst_out), .ain(fir_acc_in_reg), .accum_out(fir_temp_res));
defparam Usa.WIDTH_A = ACCUM_WIDTH;
wire [19:0] fir_int_res;
lc_store_cen Ures_reg (.clk(clk), .ce(done_int), .rst(rst), .gclk_en(clk_en),.data_in(fir_temp_res[ACCUM_WIDTH-1:0]), .q(fir_int_res) );
defparam Ures_reg.WIDTH = ACCUM_WIDTH;
assign fir_result = fir_int_res;
scv_ctrl_deci ctrl
(.rst(rst), .clk(clk), .acc_rst_out(acc_rst_out),.clk_en(clk_en), 
.done_int(done_int), .rdy_int(rdy_int), .rev_copy(rev_copy), .data_ld(data_ld), .done(done), .rdy_to_ld(rdy_to_ld));
defparam ctrl.REG_LEN   = 2;
defparam ctrl.PIPE_DLY  = 10;
defparam ctrl.PIPE_WIDTH  = 4;
defparam ctrl.IS_ODD  = 1;
defparam ctrl.IS_SYM  = 1;
defparam ctrl.SINGLE_COEF_SET  = 1;

endmodule
