// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/25/2014 13:14:46"
                                                                                
// Verilog Test Bench template for design : Equalizer
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module Equalizer_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [15:0] Rin;
reg [15:0] Xin;
reg clk,clk_data;
reg rst;
// wires                                               
wire [15:0]  Error;
wire [15:0]  Yout;

// assign statements (if any)                          
Equalizer i1 (
// port map - connection between master ports and signals/registers   
	.Error(Error),
	.Rin(Rin),
	.Xin(Xin),
	.Yout(Yout),
	.clk(clk),
	.rst(rst)
);
parameter clk_period=400; //设置时钟信号周期（频率）
parameter period_data=clk_period*6;//数据周期
parameter clk_half_period=clk_period/2;
parameter data_half_period=period_data/2;
parameter data_num=2000;  //仿真数据长度
parameter time_sim=data_num*period_data; //仿真时间

initial
begin
	//设置时钟信号初值
	clk=1;
	clk_data=1;
	//设置复位信号
	rst=1;
	#10000 rst=0;
	//设置仿真时间
	#time_sim $finish;
	//设置输入信号初值
end



//产生时钟信号
always                                                 
	#clk_half_period clk=~clk;

always                                                 
	#data_half_period clk_data=~clk_data;
	
//从外部TX文件读入数据作为测试激励
integer Pattern;
reg [15:0] stimulus[1:data_num];
initial
begin
   //文件必须放置在"工程目录\simulation\modelsim"路径下
	$readmemb("E7_3_x_in.txt",stimulus);
	Pattern=0;
	repeat(data_num)
		begin
			Pattern=Pattern+1;
			Xin=stimulus[Pattern];
			#period_data;//数据周期为时钟周期的8倍
		end
end


integer Pattern2;
reg [15:0] stimulus2[1:data_num];
initial
begin
   //文件必须放置在"工程目录\simulation\modelsim"路径下
	$readmemb("E7_3_r_in.txt",stimulus2);
	Pattern2=0;
	repeat(data_num)
		begin
			Pattern2=Pattern2+1;
			Rin=stimulus2[Pattern2];
			#period_data;//数据周期为时钟周期的6倍
		end
end



//将仿真数据Error写入外部TXT文件中(E7_3_Error_out.txt)

	
integer file_out;
initial 
begin
   //文件放置在"工程目录\simulation\modelsim"路径下                                                  
	file_out = $fopen("E7_3_Error_out.txt");
	if(!file_out)
		begin
			$display("could not open file!");
			$finish;
		end
end
wire rst_write;
wire signed [15:0] dout_s;
assign dout_s = Error;                   //将dout转换成有符号数据
assign rst_write = clk_data& (!rst);//产生写入时钟信号，复位状态时不写入数据
always @(posedge rst_write )
	$fdisplay(file_out,"%d",dout_s);

	
endmodule

